///////////////////////////////////////////////////////////////////////////////////////
/// \file futtestgenerator.cpp
/// \brief The futhark test generator file
///
/// Used to generate futhark test files
/// production, respiration and evapotranspiration.
///
/// \author Ben Smith
/// $Date: 2019-10-09 19:37:07 +0200 (Wed, 09 Oct 2019) $
///
///////////////////////////////////////////////////////////////////////////////////////

// source: https://stackoverflow.com/questions/8412630/how-to-execute-a-piece-of-code-only-once
#include <atomic>
#define FIRST_TIME_HERE ([] { \
    static std::atomic<bool> first_time(true); \
    return first_time.exchange(false); } ())

#include <string>
#include <iostream>
#include <sstream>
#include <vector>
#include <fstream>
#include <string>
using namespace std;

// default to_string prints false as "0" etc.
std::string to_string(bool b) {
  return b ? "true" : "false";
}

static string real_string = "f64";

void gen_test_file(std::ostringstream& oss,
                   const string function){

  string test_dir = "futhark_tests/";
  ostringstream pathstream;
  pathstream << test_dir << function << "_test.fut";
  std::ofstream file(pathstream.str()); //open in constructor
  file << oss.str();
  cout << endl << "Printed testfile to: " << pathstream.str() << endl;
}

void dec_real(std::ostringstream& oss,
              const std::string& var,
              const double val
              ){
  oss << "  let " << var << " : " << real_string << " = " << val << endl;
}

void dec_enum(std::ostringstream& oss,
              const std::string& var,
              const int val
              ){
  oss << "  let " << var << " : " << "enum_type" << " = " << val << endl;
}

void dec_bool(std::ostringstream& oss,
              const std::string& var,
              const bool val
              ){
  oss << "  let " << var << " : " << "bool" << " = " << to_string(val) << endl;
}

void init_oss(std::ostringstream& oss){
  oss << "open import \"../../futsource/everything\"" << endl;
  oss << endl;
  oss << "let input =" << endl;
}


void inplace_update(std::ostringstream& oss,
                    const std::string& object,
                    const std::string& field,
                    const std::string& value
                    ) {
  oss << "  let " << object << " = " << object << " with " << field << " = " << value << endl;
  }


void init_obj(std::ostringstream& oss,
              const std::string& object,
              const std::string& object_gen
              ) {
  oss << "  let " << object << " = " << object_gen << endl;
  }

void obj_with_fields(std::ostringstream& oss,
                    const std::string& object,
                    const std::string& object_gen,
                    const string fields_values[],
                    const unsigned int num_fields
                    ) {
  init_obj(oss, object, object_gen);
  for (unsigned int i = 0; i < (num_fields*2); i+=2){
    inplace_update(oss, object, fields_values[i], fields_values[i+1]);
  }
  oss << endl;
}

void finish_input(std::ostringstream& oss,
                  const string input){
  oss << "  in " << input << endl;
  oss << endl;
}

void gen_entry_point_test(std::ostringstream& oss
                         ,const string function
                         ,const string function_output
                         ,const string testname
                         ,const string output_element
                         ,const string value
                         ) {
  // print test comment
  oss << "-- Autogenerated test of " << function << " output " << function_output << " field: " << testname << endl;
  oss << "-- ==" << endl;
  oss << "-- entry: " << testname << "_test" << endl;
  oss << "-- input {}" << endl;
  oss << "-- output { " << value << " }" << endl;
  oss << endl;

  // print entrypoint
  oss << "entry " << testname << "_test" << " =" << endl;
  oss << "  let " << function_output << " = " << function << " input" << endl;
  oss << "  in " << output_element << endl;
  oss << endl;
 }

void gen_entry_point_tests(std::ostringstream& oss
                          ,const string function
                          ,const string function_output
                          ,const string fields_values[]
                          ,const unsigned int num_fields
                        )
  {
    for (unsigned int i = 0; i < (num_fields*3); i+=3){
      gen_entry_point_test(oss, function, function_output, fields_values[i], fields_values[i+1], fields_values[i+2]);
    }
  }
